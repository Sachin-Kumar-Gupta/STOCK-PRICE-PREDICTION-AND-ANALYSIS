# -*- coding: utf-8 -*-
"""Stock Price Prediction Using Regid(Linear Regression).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKeptGRBqH9WTaOngGwqXumthxnDSB4p
"""

#Importing Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.figure_factory as ff

stock_price = pd.read_csv('stock.csv')
stock_price

stock_volume = pd.read_csv('stock_volume.csv')
stock_volume

#Shorting Dataset according to  Date
stock_price = stock_price.sort_values(by = ['Date'])
stock_volume = stock_volume.sort_values(by = ['Date'])

"""#Checking for null values"""

stock_price.isnull().sum()

stock_volume.isnull().sum()

stock_price.info()

stock_volume.info()

stock_price.describe()

stock_volume.describe()

#Function to normalize stock price based on initial price
def normalize(df):
  x = df.copy()
  for i in x.columns[1:]:
    x[i] = x[i]/x[i][0]
  return x

#Function to plot interactive plot using plotpy
def interactive_plot(df, title):
  fig = px.line(title = title)
  for i in df.columns[1:]:
    fig.add_scatter(x = df['Date'], y = df[i], name = i)
  fig.show()

interactive_plot(stock_price , 'Stock Price')

interactive_plot(stock_volume, "Stock Volume")

interactive_plot(normalize(stock_price), "Normalized Stock Price")

#Concatinting Date, Price and Volume in Stock data
def individual_data(price, volume, name):
  return pd.DataFrame({'Date':price['Date'], 'Close':price[name], 'Volume': volume[name]})

#Function to return the input/output data
def trading_window(data):
  n = 1
  data['Target'] = data[['Close']].shift(-n)
  return data

#Testing function for sp500
price_volume_df = individual_data(stock_price , stock_volume, 'sp500')
price_volume_df

price_volume_target = trading_window(price_volume_df)
price_volume_target

#As last row is now nan so we have to remove that row
price_volume_target = price_volume_target[:-1]
price_volume_target

#Feature Scaling
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
price_volume_target_scaled = sc.fit_transform(price_volume_target.drop(columns = ['Date']))

price_volume_target_scaled.shape

X = price_volume_target_scaled[: , :2]
y = price_volume_target_scaled[: , 2:]

X

X.shape

#Splitting Dataset for training and testiing
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.35, random_state = 0)

X_train.shape

X_test.shape

#defing Data plotting function
def show_plot(data, title):
  plt.figure(figsize= (13,5))
  plt.plot(data, linewidth = 3)
  plt.title(title)
  plt.grid()

show_plot(X_train, "Training Data")

"""#Model Building"""

from sklearn.linear_model import Ridge
regressor = Ridge()
regressor.fit(X_train, y_train)

lr_accuracy = regressor.score(X_test, y_test) 
print(lr_accuracy)

predicted_price = regressor.predict(X)
predicted_price

predicted = []
for i in predicted_price:
  predicted.append(i[0])

len(predicted)

close = []
for i in price_volume_target_scaled:
  close.append(i[0])

df_predicted = price_volume_target[['Date']]
df_predicted

df_predicted['Close'] = close

df_predicted['Prediction'] = predicted
df_predicted

interactive_plot(df_predicted, "Prediction")